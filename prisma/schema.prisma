datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  celular       String?
  endereco      String?
  password      String?
  token         String?   @unique
  username      String?
  gh_username   String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  userHasPaid   Boolean?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  sites         Site[]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id            String   @id @default(cuid())
  title         String?  @db.Text
  description   String?  @db.Text
  content       String?  @db.Text
  slug          String   @default(cuid())
  image         String?  @db.Text
  imageBlurhash String?  @db.Text
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  published     Boolean  @default(false)
  site          Site?    @relation(fields: [siteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  siteId        String?

  @@unique([id, siteId], name: "post_site_constraint")
  @@index([siteId])
}

model Estoque {
  id            String   @id @default(cuid())
  name          String?  @db.Text
  slug          String?  @default(cuid())
  validade      String?  @db.Text
  minimo        String?  @db.Text
  unidade       String?  @db.Text
  vencimento    String?  @db.Text
  dataDaCompra  String?  @db.Text
  valor         String?  @db.Text
  valorTotal    String?  @db.Text
  image         String?  @db.Text
  imageBlurhash String?  @db.Text
  pago          Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  site          Site?    @relation(fields: [siteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  siteId        String?

  @@unique([id, siteId], name: "estoque_site_constraint")
  @@index([siteId])
}

model Feedback {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  message       String?  @db.Text
  email         String?  @db.Text
  slug          String?  @default(cuid())
  name          String?  @db.Text
  nota          String?  @db.Text
  image         String?  @db.Text
  imageBlurhash String?  @db.Text
  site          Site?    @relation(fields: [siteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  siteId        String?

  @@unique([id, siteId], name: "feedback_site_constraint")
  @@index([siteId])
}

model Paciente {
  id            String      @id @default(cuid())
  name          String?
  telefone      String?
  sexo          String?
  observacoes   String?
  anotacoes     String?     @db.Text
  rg            String?
  cpf           String?
  endereco      String?
  cep           String?
  complemento   String?
  email         String?
  grupo         GrupoType?  @default(Infantil)
  image         String?     @db.Text
  imageBlurhash String?     @db.Text
  pago          Boolean     @default(false)
  slug          String?     @default(cuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  site          Site?       @relation(fields: [siteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  siteId        String?
  anamneses     Anamnese[]
  fotos         Foto[]
  documentos    Documento[]
  agendas       Agenda[]

  @@unique([id, siteId], name: "post_site_constraint")
  @@index([siteId])
}

model Agenda {
  id            String    @id @default(cuid())
  slug          String?   @default(cuid())
  horario       DateTime?
  dia           String?   @db.Text
  valor         String?   @db.Text
  procedimento  String?   @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  image         String?   @db.Text
  imageBlurhash String?   @db.Text
  site          Site?     @relation(fields: [siteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  siteId        String?
  paciente      Paciente? @relation(fields: [pacienteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pacienteId    String?

  @@unique([id, siteId], name: "post_site_constraint")
  @@index([siteId])
}

model Author {
  id        String @id @default(cuid())
  firstName String
  lastName  String
  ibas      Iba[]
}

model Iba {
  id       String  @id @default(cuid())
  title    String
  body     String
  author   Author? @relation(fields: [authorId], references: [id])
  authorId String?
}

model Anamnese {
  id            String    @id @default(cuid())
  slug          String?   @default(cuid())
  pergunta      String?   @db.Text
  resposta      String?   @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  image         String?   @db.Text
  imageBlurhash String?   @db.Text
  published     Boolean   @default(false)
  paciente      Paciente? @relation(fields: [pacienteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pacienteId    String?
}

model Foto {
  id         String    @id @default(cuid())
  url        String?
  paciente   Paciente? @relation(fields: [pacienteId], references: [id])
  pacienteId String?
}

model Documento {
  id         String    @id @default(cuid())
  url        String?
  paciente   Paciente? @relation(fields: [pacienteId], references: [id])
  pacienteId String?
}

model Despesa {
  id           String   @id @default(cuid())
  name         String?
  slug         String?  @default(cuid())
  valor        String?
  vencimento   String?
  dataDaCompra String?
  empresa      String?
  pago         Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  site         Site?    @relation(fields: [siteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  siteId       String?

  @@unique([id, siteId], name: "post_site_constraint")
  @@index([siteId])
}

model Ganho {
  id          String   @id @default(cuid())
  name        String?
  slug        String?  @default(cuid())
  empresa     String?
  valor       String?
  recebimento String?
  pago        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  site        Site?    @relation(fields: [siteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  siteId      String?

  @@unique([id, siteId], name: "post_site_constraint")
  @@index([siteId])
}

enum GrupoType {
  Infantil
  Jovem
  Adulto
  Idoso
}

model Site {
  id             String         @id @default(cuid())
  name           String?
  estado         String?
  cidade         String?
  email          String?
  celular        String?
  description    String?        @db.Text
  logo           String?
  font           String         @default("font-cal")
  image          String?        @db.Text
  imageBlurhash  String?        @db.Text
  subdomain      String?        @unique
  customDomain   String?        @unique
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  stripeCustomer String?
  user           User?          @relation(fields: [userId], references: [id])
  userId         String?
  posts          Post[]
  pacientes      Paciente[]
  despesa        Despesa[]
  ganho          Ganho[]
  feedback       Feedback[]
  estoques       Estoque[]
  subscriptions  Subscription[]
  agenda         Agenda[]

  @@index([userId])
}

model Example {
  id            Int     @id @default(autoincrement())
  name          String?
  description   String? @db.Text
  domainCount   Int?
  url           String?
  image         String? @db.Text
  imageBlurhash String? @db.Text
}

model Subscription {
  id                 String   @id @default(cuid())
  stripeId           String?
  createdAt          DateTime @default(now()) @db.Timestamp(6)
  updatedAt          DateTime @default(now()) @db.Timestamp(6)
  currentPeriodStart DateTime @default(now())
  currentPeriodEnd   DateTime
  subscriptionStatus Boolean
  site               Site?    @relation(fields: [siteId], references: [id])
  siteId             String?
}
